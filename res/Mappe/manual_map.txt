DATA:           <data> defined map data
tilesize:       set the size of ground images
showcollisions: set if collisions can be che seen visually ("true" or "false")
camdistance:    set camera distance from playable character
onLoad:         apicall that defines a script to be called right after map is loaded
onUnload:       apicall that defines a script to be called right before the map is changed

    ROW:        <row> starts a grid row
    
        TILE    <tile> : creates a single tile
        walkable:       set the tile walkable or not
        
            GROUND:             <ground />  represents a ground object, every new ground in the same tile will overwrite previous ground image.
                                            if alpha channel is present, colors will be merged.
            url:                url of resource
            walkable:           set if ground can be walkable ("true" or "false", default: true)
            
            
            CHARACTER           <character /> represents a character playable in the game or an NPC
            id:                 unique identification string
            url:                url of resource
            inclination:        inclination of character
            scale:              scale character
            playable:           defines if character is playable or not in an exact moment
            hitboxscale:        defines the character collision
            direction:          can be "left" "right" "top" "down"
            
            
            
            OBJECT:             <object /> normal object in world, has collisions
            id:                 unique identification string
            url:                url of the resource found by the resourcemanager
            walkable:           set if object can be walkable ("true" or "false", default: false)
            inclination:        inclination of object
            offsetwidth:        used to stretch collisions in 3d mode horizontally
            offsetheight:       used to stretch collisions in 3d mode vertically
            elevation:          set manually elevation of object
            scale:              scale objects
            offsethorizontal:   place object horizontally pixel perfect
            offsetvertical:     place object vertically pixel perfect
            offsetcollisionh:   place collision solid horizontally pixel perfect
            offsetcollisionv:   place collision solid vertically pixel perfect
            collisionmode:      can be "3d" that let character go behind an object or "2d" for completely collide all image with very low inclination degrees
            avoidable:          can be "true" or "false" (default: "false"). Mark an object as intelligently avoidable when hitting just the corner
            
            LIGHT:              <light />
            id:                 unique id
            on:                 if light is on by default
            distance:           height from tile position
            color:              color expressed by an RGB string like "255,255,166"
            attenuation:        quadratic value at which light power decreases. Use very small values like 0.1, 0.05 or 0.2
            type:               type of light used. can be "point" or "spot"
            
            GRASS:              <grass /> special grass object
            
Events API:
            onWalked:           used to create the change Map events, must give the Map Name and the character position
                                "messenger.send('changeMap', ['MapName.map','PositionX,PositionY'])"
            onPicked:           used to trigger things that are close to the mai character and the player press action button
                                (default: spacebar)
                                
Scripting API:

-----GENERAL SYNTAX

            ###pause
                requests a game engine pause to execute things like baloons and music etc.

-----BROADCAST EVENTS
            
            messenger.send('changeMap', ['corridoio.map','3,1'])"
                request a changemap with ['MapName.map','PositionX,PositionY']

-----BALOONS

            baloons.push(speaker, text, id, speed)
				shows a baloon with a message. Can feature speaker tag and animation speed.
				speaker             that will say those words
				text                message to be shown
				id                  unique identification string
				speed               animation speed at which the message will be shown

-----LIGHTS
            lamp.toggle()
                realtime toggle
            lamp.setOn()
                realtime setting on
            lamp.setOff()
                realtime setting off

-----AUDIO

            audioManager.playMusic(resource_path)
                plays background music in loop. Only one can be played at a time.
            
            audioManager.stopMusic()
            
            audioManager.playEffect(resource_path)
                plays small sound effect without loop
            
            audioManager.playLongEffect(name, resource_path)
                plays long sound effect on background (like rain or birds)
            
            audioManager.stopLongEffect(name)
                stops and delete long effect based on name
            
            audioManager.clearAllEffects()
                auto called when changing map, clears all long effects playing
            
------PERSISTENCE
            
            persistence.save(key, value)
                save a variable named <key> with <value> cross levels
            persistence.load(key)
                get a variable value with <key>
            persistence.del(key)
                delete a variable with <key>
	    
	    
	    
	    
	    
	    
